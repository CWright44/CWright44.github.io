{"ast":null,"code":"import _slicedToArray from \"/Users/chelseawright/Coding_Projects/react_development/React/netflix-slider/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/chelseawright/Coding_Projects/react_development/React/netflix-slider/src/components/NetflixSlider/Item.js\";\n\n/* import React from \"react\"; */\nimport React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport SliderContext from \"./context\";\nimport ShowDetailsButton from \"./ShowDetailsButton\";\nimport Mark from \"./Mark\";\nimport \"./Item.scss\";\nimport { faThList } from \"@fortawesome/free-solid-svg-icons\"; // import { render } from \"node-sass\";\n\nvar transformation;\n\nvar Item = function Item(_ref) {\n  var movie = _ref.movie;\n  return /*#__PURE__*/React.createElement(SliderContext.Consumer, {\n    props: {\n      movie: movie\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, function (_ref2) {\n    var onSelectSlide = _ref2.onSelectSlide,\n        currentSlide = _ref2.currentSlide,\n        elementRef = _ref2.elementRef;\n    var isActive = currentSlide && currentSlide.id === movie.id,\n        transitionSize = movie.transitionSize,\n        transitionEase = movie.transitionEase,\n        transitionGrowth = movie.transitionWidth;\n\n    function sethooks() {\n      var _useState = useState(0),\n          _useState2 = _slicedToArray(_useState, 2),\n          hover = _useState2[0],\n          setHover = _useState2[1];\n    }\n\n    function setHover1(bool) {\n      hover = bool;\n      console.log(hover);\n    }\n\n    function setStyle(hovered) {\n      console.log(\"this is the assignmet of hover\" + hovered);\n      hovered ? transformation = \"scale(\" + transitionGrowth + \")\" : transformation = \"scale(1.0)\"; // console.log(\n      //   \"this is the assignment of transformation\" + transformation\n      // );\n\n      console.log({\n        transform: transformation,\n        transition: \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\"\n      });\n      return {\n        transform: transformation,\n        transition: \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\"\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseOut: function onMouseOut() {\n        return setHover(false);\n      },\n      onMouseOver: function onMouseOver() {\n        return setHover(true);\n      },\n      style: setStyle(hover),\n      ref: elementRef,\n      className: cx(\"item\", {\n        \"item--open\": isActive\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: movie.image,\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ShowDetailsButton, {\n      onClick: function onClick() {\n        return onSelectSlide(movie);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), isActive && /*#__PURE__*/React.createElement(Mark, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 24\n      }\n    }));\n  });\n};\n\nexport default Item;","map":{"version":3,"sources":["/Users/chelseawright/Coding_Projects/react_development/React/netflix-slider/src/components/NetflixSlider/Item.js"],"names":["React","useState","cx","SliderContext","ShowDetailsButton","Mark","faThList","transformation","Item","movie","onSelectSlide","currentSlide","elementRef","isActive","id","transitionSize","transitionEase","transitionGrowth","transitionWidth","sethooks","hover","setHover","setHover1","bool","console","log","setStyle","hovered","transform","transition","image"],"mappings":"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","sourcesContent":["/* import React from \"react\"; */\nimport React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport SliderContext from \"./context\";\nimport ShowDetailsButton from \"./ShowDetailsButton\";\nimport Mark from \"./Mark\";\nimport \"./Item.scss\";\nimport { faThList } from \"@fortawesome/free-solid-svg-icons\";\n// import { render } from \"node-sass\";\n\nvar transformation;\n\nconst Item = ({ movie }) => (\n  <SliderContext.Consumer props={{ movie }}>\n    {({ onSelectSlide, currentSlide, elementRef }) => {\n      const isActive = currentSlide && currentSlide.id === movie.id,\n        transitionSize = movie.transitionSize,\n        transitionEase = movie.transitionEase,\n        transitionGrowth = movie.transitionWidth;\n\n\n      function sethooks(){\n      const [hover, setHover] = useState(0);\n      }\n\n     \n\n      function setHover1(bool) {\n        hover = bool;\n        console.log(hover);\n      }\n\n      function setStyle(hovered) {\n        console.log(\"this is the assignmet of hover\" + hovered);\n        hovered\n          ? (transformation = \"scale(\" + transitionGrowth + \")\")\n          : (transformation = \"scale(1.0)\");\n        // console.log(\n        //   \"this is the assignment of transformation\" + transformation\n        // );\n\n        console.log({\n          transform: transformation,\n          transition:\n            \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\",\n        });\n\n        return {\n          transform: transformation,\n          transition:\n            \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\",\n        };\n      }\n\n      return (\n        <div\n          onMouseOut={() => setHover(false)}\n          onMouseOver={() => setHover(true)}\n          style={setStyle(hover)}\n          ref={elementRef}\n          className={cx(\"item\", {\n            \"item--open\": isActive,\n          })}\n        >\n          <img src={movie.image} alt=\"\" />\n          <ShowDetailsButton onClick={() => onSelectSlide(movie)} />\n          {isActive && <Mark />}\n        </div>\n      );\n    }}\n  </SliderContext.Consumer>\n);\n\nexport default Item;\n"]},"metadata":{},"sourceType":"module"}