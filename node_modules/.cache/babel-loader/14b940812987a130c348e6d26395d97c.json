{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/chelseawright/Coding_Projects/react_development/React/netflix-slider/src/components/NetflixSlider/Item.js\";\n\n/* import React from \"react\"; */\nimport React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport SliderContext from \"./context\";\nimport ShowDetailsButton from \"./ShowDetailsButton\";\nimport Mark from \"./Mark\";\nimport \"./Item.scss\"; // import { render } from \"node-sass\";\n\nvar transformation;\n\nvar Item = function Item(_ref) {\n  var movie = _ref.movie,\n      props = _ref.props;\n  return /*#__PURE__*/React.createElement(SliderContext.Consumer, {\n    props: {\n      movie: movie\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 3\n    }\n  }, function (_ref2) {\n    var onSelectSlide = _ref2.onSelectSlide,\n        currentSlide = _ref2.currentSlide,\n        elementRef = _ref2.elementRef;\n    var isActive = currentSlide && currentSlide.id === movie.id,\n        transitionSize = movie.transitionSize,\n        transitionEase = movie.transitionEase,\n        transitionGrowth = movie.transitionWidth; // console.log(\"transitionSize \" + movie.transitionWidth);\n    // console.log(\"transform \" + transitionSize + \" ease \" + transitionEase);\n\n    function setHoverProp(currhoverstate) {\n      // const [hover, setHover] = useState(currhoverstate);\n      setHover(currhoverstate);\n    }\n    /* Would I do it like a getter setter ? */\n\n\n    function getHoverProp() {\n      return this.state.hover;\n    } // function setHoverProp(bool) {\n    //   hover = bool;\n    //   console.log(hover);\n    // }\n\n\n    function setStyle(hovered) {\n      console.log(\"this is the assignmet of hover\" + hovered);\n      hovered ? transformation = \"scale(\" + transitionGrowth + \")\" : transformation = \"scale(1.0)\"; // console.log(\n      //   \"this is the assignment of transformation\" + transformation\n      // );\n\n      console.log({\n        transform: transformation,\n        transition: \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\"\n      });\n      return {\n        transform: transformation,\n        transition: \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\"\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseOut: function onMouseOut() {\n        return setHoverProp(false);\n      },\n      onMouseOver: function onMouseOver() {\n        return setHoverProp(true);\n      },\n      style: setStyle(getHoverProp()),\n      ref: elementRef,\n      className: cx(\"item\", {\n        \"item--open\": isActive\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: movie.image,\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ShowDetailsButton, {\n      onClick: function onClick() {\n        return onSelectSlide(movie);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), isActive && /*#__PURE__*/React.createElement(Mark, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 24\n      }\n    }));\n  });\n};\n\nexport default Item;","map":{"version":3,"sources":["/Users/chelseawright/Coding_Projects/react_development/React/netflix-slider/src/components/NetflixSlider/Item.js"],"names":["React","useState","cx","SliderContext","ShowDetailsButton","Mark","transformation","Item","movie","props","onSelectSlide","currentSlide","elementRef","isActive","id","transitionSize","transitionEase","transitionGrowth","transitionWidth","setHoverProp","currhoverstate","setHover","getHoverProp","state","hover","setStyle","hovered","console","log","transform","transition","image"],"mappings":"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","sourcesContent":["/* import React from \"react\"; */\nimport React, { useState } from \"react\";\nimport cx from \"classnames\";\nimport SliderContext from \"./context\";\nimport ShowDetailsButton from \"./ShowDetailsButton\";\nimport Mark from \"./Mark\";\nimport \"./Item.scss\";\n// import { render } from \"node-sass\";\n\nvar transformation;\n\n\n\nconst Item = ({ movie,props }) => (\n\n  \n\n\n\n  <SliderContext.Consumer props={{ movie }}>\n    {({ onSelectSlide, currentSlide, elementRef }) => {\n\n\n      \n\n\n      const isActive = currentSlide && currentSlide.id === movie.id,\n        transitionSize = movie.transitionSize,\n        transitionEase = movie.transitionEase,\n        transitionGrowth = movie.transitionWidth;\n      // console.log(\"transitionSize \" + movie.transitionWidth);\n      // console.log(\"transform \" + transitionSize + \" ease \" + transitionEase);\n\n      function setHoverProp(currhoverstate) {\n        // const [hover, setHover] = useState(currhoverstate);\n        setHover(currhoverstate );\n      }\n\n      /* Would I do it like a getter setter ? */\n      function getHoverProp() {\n        return this.state.hover;\n      }\n\n      // function setHoverProp(bool) {\n      //   hover = bool;\n      //   console.log(hover);\n      // }\n\n      function setStyle(hovered) {\n        console.log(\"this is the assignmet of hover\" + hovered);\n        hovered\n          ? (transformation = \"scale(\" + transitionGrowth + \")\")\n          : (transformation = \"scale(1.0)\");\n        // console.log(\n        //   \"this is the assignment of transformation\" + transformation\n        // );\n\n        console.log({\n          transform: transformation,\n          transition:\n            \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\",\n        });\n\n        return {\n          transform: transformation,\n          transition:\n            \"transform \" + transitionSize + \"ms ease \" + transitionEase + \"ms\",\n        };\n      }\n\n      return (\n        <div\n          onMouseOut={() => setHoverProp(false)}\n          onMouseOver={() => setHoverProp(true)}\n          style={setStyle(getHoverProp())}\n          ref={elementRef}\n          className={cx(\"item\", {\n            \"item--open\": isActive,\n          })}\n        >\n          <img src={movie.image} alt=\"\" />\n          <ShowDetailsButton onClick={() => onSelectSlide(movie)} />\n          {isActive && <Mark />}\n        </div>\n      );\n    }}\n  </SliderContext.Consumer>\n);\n\nexport default Item;\n"]},"metadata":{},"sourceType":"module"}